crystal_doc_search_index_callback({"repository_name":"for","body":"![for.cr CI](https://img.shields.io/github/workflow/status/wyhaines/for.cr/for.cr%20CI?style=for-the-badge&logo=GitHub)\n[![GitHub release](https://img.shields.io/github/release/wyhaines/for.cr.svg?style=for-the-badge)](https://github.com/wyhaines/for.cr/releases)\n![GitHub commits since latest release (by SemVer)](https://img.shields.io/github/commits-since/wyhaines/for.cr/latest?style=for-the-badge)\n\n# for\n\nThis little shard implements a couple macros for additional for-loop-like looping constructs.\n\nIt implements a simple declarative style for-like iteration loop called `iterate`, which traverses all of the elements of a collection, passing each in turn to the provided block. It also implements a C-style `for` looping construct, which can be assigned to a variable for execution later (or for repeated execution), with *initialization*, *test*, and *update* code lines, and a body that runs as a closure with its own lexical scope.\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     for:\n       github: wyhaines/for.cr\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"for\"\n```\n\nThis defines three macros at the top level.\n\n### using\n\nThe first is `using TARGET`, which is a syntactic sugar macro. `using foo` results in inserting `foo` where it is executed.\n\nThis means that the following are equivalent:\n\n```crystal\nfor(count, ary) { puts count }\n\nfor(count, using ary) { puts count }\n```\n\nAnd the following is acceptable syntax:\n\n```crystal\nary = (1..10).to_a\n\npp using ary\n```\n\n### iterate\n\nThe second is a *for* style loop, called *iterate*, that iterates over all of the members of a collection.\n\n```crystal\nary = [1, 2, 3]\n\niterate(num, using ary) { puts num }\n\n# This is the same as:\n\nary.each { |num| puts num }\n```\n\nThis works with any collection that has an `#each` method.\n\n### for\n\nThe third structure is a C-style *for* loop.\n\n_for(*initialization*, *test*, *update*) { # block contents to iterate on }_\n\nThe *initialization*, *test, and *update* items are code that will be evaluated\nduring the execution of the loop. The code should be provided as either a *String*\nor a *Proc(Nil, Nil)*.\n\nThe *initialization* code gets executed a single time, before the loop starts, and\ncan be used to setup any state that is required before the loop runs.\n\nThe *test* code will be evaluated at the start of each iteration. If it evaluates to\n*false*, then the loop body will execute. If it evaluates to *true* then the loop\nexits immediately.\n\nThe *update* code executes after the loop body, and can be used to change counters\nor other state that the *test* code may depend on to determine if the loop has finished\nexecution.\n\nThis structure could be legitimately useful. The loop so created is a closure, and\ncan be captured in a variable.\n\n```crystal\n# Specify code with strings.\nfor(%(t = 0), %( t < 10), %(t += 1)) do\n  # Do Stuff\nend\n```\n\n```crystal\n# Specify code with procs, and leverage the fact that it is a closure.\nt = uninitialized Int32\nfor(->{ t = 0 }, ->{ t < 10 }, ->{ t += 1 }) do\n  # Do Stuff\nend\nputs t\n# => 10\n```\n\n```crystal\n# The *for* loop can be assigned to a variable and called later.\nary = (1..10).to_a\n\nt = uninitialized Int32\ntransform = for(->{ t = 0 }, ->{ t < 10 }, ->{ t += 1 }, run: false) { ary[t] = ary[t] * ary[t] }\n\n# Do some stuff here...\n\ntransform.call\n\npp ary\n# => [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n\n\n## Contributing\n\n1. Fork it (<https://github.com/wyhaines/for.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kirk Haines](https://github.com/wyhaines) - creator and maintainer\n\n![GitHub code size in bytes](https://img.shields.io/github/languages/code-size/wyhaines/for.cr?style=for-the-badge)\n![GitHub issues](https://img.shields.io/github/issues/wyhaines/for.cr?style=for-the-badge)\n","program":{"html_id":"for/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"for","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[{"id":"for(init,test,update,run=true,&blk)-macro","html_id":"for(init,test,update,run=true,&amp;blk)-macro","name":"for","doc":"This `for` implementation provides a C-like looping structure.\n\n_for(*initialization*, *test*, *update*) { # block contents to iterate on }_\n\nThe *initialization*, *test, and *update* items are code that will be evaluated\nduring the execution of the loop. The code should be provided as either a *String*\nor a *Proc(Nil, Nil)*.\n\nThe *initialization* code gets executed a single time, before the loop starts, and\ncan be used to setup any state that is required before the loop runs.\n\nThe *test* code will be evaluated at the start of each iteration. If it evaluates to\n*false*, then the loop body will execute. If it evaluates to *true* then the loop\nexits immediately.\n\nThe *update* code executes after the loop body, and can be used to change counters\nor other state that the *test* code may depend on to determine if the loop has finished\nexecution.\n\nThis structure could be legitimately useful. The loop so created is a closure, and\ncan be captured in a variable.\n\n```\n# Specify code with strings.\nfor(%(t = 0), %( t < 10), %(t += 1)) do\n  # Do Stuff\nend\n```\n\n```\n# Specify code with procs, and leverage the fact that it is a closure.\nt = uninitialized Int32\nfor(->{ t = 0 }, ->{ t < 10 }, ->{ t += 1 }) do\n  # Do Stuff\nend\nputs t\n# => 10\n```\n\n```\n# The *for* loop can be assigned to a variable and called later.\nary = (1..10).to_a\n\nt = uninitialized Int32\ntransform = for(->{ t = 0 }, ->{ t < 10 }, ->{ t += 1 }, run: false) { ary[t] = ary[t] * ary[t] }\n\n# Do some stuff here...\n\ntransform.call\n\npp ary\n# => [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n```\n","summary":"<p>This <code><a href=\"toplevel.html#for(init,test,update,run=true,&blk)-macro\">for</a></code> implementation provides a C-like looping structure.</p>","abstract":false,"args":[{"name":"init","doc":null,"default_value":"","external_name":"init","restriction":""},{"name":"test","doc":null,"default_value":"","external_name":"test","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"run","doc":null,"default_value":"true","external_name":"run","restriction":""}],"args_string":"(init, test, update, run = <span class=\"n\">true</span>, &blk)","location":{"filename":"src/for.cr","line_number":95,"url":null},"def":{"name":"for","args":[{"name":"init","doc":null,"default_value":"","external_name":"init","restriction":""},{"name":"test","doc":null,"default_value":"","external_name":"test","restriction":""},{"name":"update","doc":null,"default_value":"","external_name":"update","restriction":""},{"name":"run","doc":null,"default_value":"true","external_name":"run","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"blk","doc":null,"default_value":"","external_name":"blk","restriction":""},"visibility":"Public","body":"  ->() do\n    \n{{ (init.is_a?(ProcLiteral) ? init.body : init).id }}\n\n    loop do\n      break unless \n{{ (test.is_a?(ProcLiteral) ? test.body : test).id }}\n\n\n      \n{{ blk.body.id }}\n\n      \n{{ (update.is_a?(ProcLiteral) ? update.body : update).id }}\n\n    \nend\n  \nend\n{{ run ? \".call\".id : \"\".id }}\n\n\n"}},{"id":"iterate(*elements,&blk)-macro","html_id":"iterate(*elements,&amp;blk)-macro","name":"iterate","doc":"This is a *for* style loop that iterates over all of the members of a collection.\n\n```\nary = [1, 2, 3]\n\niterate(num, using ary) { puts num }\n\n# This is the same as:\n\nary.each { |num| puts num }\n```\n\nThis works with any collection that has an `#each` method.\n","summary":"<p>This is a <em>for</em> style loop that iterates over all of the members of a collection.</p>","abstract":false,"args":[{"name":"elements","doc":null,"default_value":"","external_name":"elements","restriction":""}],"args_string":"(*elements, &blk)","location":{"filename":"src/for.cr","line_number":32,"url":null},"def":{"name":"iterate","args":[{"name":"elements","doc":null,"default_value":"","external_name":"elements","restriction":""}],"double_splat":null,"splat_index":0,"block_arg":{"name":"blk","doc":null,"default_value":"","external_name":"blk","restriction":""},"visibility":"Public","body":"  \n{% target = elements[-1] %}\n\n  \n{{ target }}\n.each do |\n{{ (elements[0..-2].join(\", \")).id }}\n|\n    \n{{ blk.body.id }}\n\n  \nend\n\n"}},{"id":"using(target)-macro","html_id":"using(target)-macro","name":"using","doc":"Syntactic sugar macro. `using foo` results in inserting `foo` where it is executed.\nThis means that the following are equivalent:\n\n```\nfor(count, ary) { puts count }\n\nfor(count, using ary) { puts count }\n```\n","summary":"<p>Syntactic sugar macro.</p>","abstract":false,"args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"args_string":"(target)","location":{"filename":"src/for.cr","line_number":14,"url":null},"def":{"name":"using","args":[{"name":"target","doc":null,"default_value":"","external_name":"target","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"  \n{{ target }}\n\n\n"}}],"types":[{"html_id":"for/For","path":"For.html","kind":"module","full_name":"For","name":"For","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/for.cr","line_number":1,"url":null}],"repository_name":"for","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}})